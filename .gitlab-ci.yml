image: docker:latest

services:
  - docker:dind  # Docker-in-Docker pour permettre d'utiliser Docker dans le pipeline
  - mongo  # Ajout de MongoDB pour les tests

stages:
  - test  # Ajout du stage de test
  - build
  - push

variables:
  DOCKER_REGISTRY: "docker.io"  # Docker Hub
  CI_REGISTRY_IMAGE_BACKEND: "$DOCKER_USERNAME/my-backend"  # Nom d'image pour le backend sur Docker Hub
  CI_REGISTRY_IMAGE_FRONTEND: "$DOCKER_USERNAME/my-frontend"  # Nom d'image pour le frontend sur Docker Hub
  MONGO_URI: "mongodb://root:example@mongo:27017/ecommerce?authSource=admin"  # Connexion Ã  MongoDB pour les tests

before_script:
  - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD" $DOCKER_REGISTRY  # Connexion Ã  Docker Hub

# ðŸ“Œ **Job de test du backend**
test_backend:
  stage: test
  image: node:18  # Image Node.js pour exÃ©cuter les tests
  before_script:
    - cd backend
    - npm install
  script:
    - npm test  # ExÃ©cuter Jest pour tester l'API

# ðŸ“Œ **Job de Build du Backend**
backend:
  stage: build
  script:
    - docker build -t $CI_REGISTRY_IMAGE_BACKEND:latest ./backend  # Construction de l'image backend
    - docker push $CI_REGISTRY_IMAGE_BACKEND:latest  # Pousser l'image backend avec tag 'latest'

# ðŸ“Œ **Job de Build du Frontend**
frontend:
  stage: build
  script:
    - docker build -t $CI_REGISTRY_IMAGE_FRONTEND:latest ./frontend  # Construction de l'image frontend
    - docker push $CI_REGISTRY_IMAGE_FRONTEND:latest  # Pousser l'image frontend avec tag 'latest'
